<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <title>Déconnexion – Duck Hunt</title>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link
      href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap"
      rel="stylesheet"
    />
    <style>
      :root {
        --tv: #1f2937;
        --tv-dark: #111827;
        --bezel: #374151;
        --glass: #0b1220;
        --text: #e5e7eb;
      }
      * {
        box-sizing: border-box;
      }
      html,
      body {
        height: 100%;
        margin: 0;
        background: #000;
        color: var(--text);
        font-family: "Press Start 2P", system-ui, monospace;
      }
      .stage {
        display: grid;
        place-items: center;
        height: 100%;
      }
      .tv {
        position: relative;
        width: min(920px, 95vw);
        aspect-ratio: 4/3;
        background: linear-gradient(145deg, var(--tv), var(--tv-dark));
        border: 10px solid var(--bezel);
        border-radius: 28px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.6);
      }
      .crt {
        position: absolute;
        inset: 20px;
        border-radius: 18px;
        background: var(--glass);
        overflow: hidden;
        cursor: crosshair;
      }
      .scan:before {
        content: "";
        position: absolute;
        inset: 0;
        pointer-events: none;
        background: linear-gradient(
            transparent 0 97%,
            rgba(0, 0, 0, 0.25) 97% 100%
          ),
          radial-gradient(
            120% 100% at 50% 0,
            rgba(255, 255, 255, 0.08),
            transparent 60%
          );
        background-size: 100% 3px, auto;
        mix-blend-mode: overlay;
        z-index: 3;
      }
      .hud {
        position: absolute;
        inset: 0;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        padding: 14px;
        z-index: 2;
        pointer-events: none;
      }
      .pill {
        background: rgba(0, 0, 0, 0.75);
        border: 2px solid #fff;
        border-radius: 10px;
        padding: 8px 12px;
        font-size: 12px;
      }
      .overlay {
        position: absolute;
        inset: 0;
        display: grid;
        place-items: end center;
        z-index: 2;
        pointer-events: none;
      }
      .back {
        pointer-events: auto;
        margin-bottom: 26px;
        background: #ff6b6b;
        border: 4px solid #000;
        color: #000;
        border-radius: 18px;
        padding: 14px 20px;
        box-shadow: 6px 6px 0 #000;
        transition: transform 0.08s;
      }
      .back:hover {
        transform: translate(-2px, -2px);
        box-shadow: 8px 8px 0 #000;
      }
      .back:active {
        transform: none;
        box-shadow: 4px 4px 0 #000;
      }
      .backdrop {
        position: absolute;
        inset: 20px;
        border-radius: 18px;
        overflow: hidden;
      }
      .sky {
        position: absolute;
        inset: 0;
        background: linear-gradient(#8fd3ff, #c6ecff);
      }
      .ground {
        position: absolute;
        left: 0;
        right: 0;
        bottom: 0;
        height: 140px;
        background: linear-gradient(#34d399 0 70%, #065f46 70% 100%);
      }
    </style>
  </head>
  <body>
    <div class="stage">
      <div class="tv">
        <div class="backdrop">
          <div class="sky"></div>
          <div class="ground"></div>
        </div>
        <div class="crt scan">
          <div class="hud">
            <div class="pill">Vous êtes bien déconnecté !</div>
            <div class="pill">Score : <span id="uiScore">0</span></div>
          </div>
          <div id="game" style="width: 100%; height: 100%"></div>
          <div class="overlay">
            <button id="btnBack" class="back">Retour aux jeux</button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/phaser@3/dist/phaser.min.js"></script>
    <script>
      const config = {
        type: Phaser.AUTO,
        parent: "game",
        width: 800,
        height: 600,
        backgroundColor: "#9ed6ff",
        pixelArt: true,
        roundPixels: true,
        scene: { preload, create },
      };

      let score = 0,
        dog;

      function preload() {
        this.load.image("duckA", "/public/images/duckhunt4.png");
        this.load.image("duckB", "/public/images/duckhunt6.jpg");
        this.load.image("dogLaugh", "/public/images/duckhunt3.gif");
        this.load.image("dogWin", "/public/images/dh.png");
      }

      function create() {
        // “peindre” la prairie de base
        const g = this.add.graphics().setDepth(0);
        g.fillStyle(0x8fd3ff, 1).fillRect(0, 0, 800, 460);
        g.fillStyle(0x34d399, 1).fillRect(0, 460, 800, 100);
        g.fillStyle(0x065f46, 1).fillRect(0, 560, 800, 40);

        // Chien au centre
        dog = this.add
          .image(400, 420, "dogLaugh")
          .setOrigin(0.5, 1)
          .setScale(1.2)
          .setDepth(2);

        // Génération régulière de canards (groupe interactif)
        const ducks = this.add.group({ runChildUpdate: true });

        const spawn = () => {
          const tex = Math.random() < 0.5 ? "duckA" : "duckB";
          const y = Phaser.Math.Between(80, 280);
          const d = this.add
            .image(-60, y, tex)
            .setScale(0.08)
            .setDepth(2)
            .setInteractive({ useHandCursor: false });
          ducks.add(d);
          this.tweens.add({
            targets: d,
            x: 860,
            duration: Phaser.Math.Between(5000, 7000),
            onComplete: () => d.destroy(),
          });
          d.on("pointerdown", () => {
            // Touché !
            score += 100;
            document.getElementById("uiScore").textContent = score;
            this.tweens.add({
              targets: d,
              alpha: 0,
              y: y + 20,
              duration: 250,
              onComplete: () => d.destroy(),
            });

            // Effet +100
            const t = this.add
              .text(d.x, d.y - 10, "+100", {
                fontFamily: "Press Start 2P",
                fontSize: "14px",
                color: "#ff4444",
              })
              .setOrigin(0.5)
              .setDepth(3);
            this.tweens.add({
              targets: t,
              y: t.y - 30,
              alpha: 0,
              duration: 600,
              onComplete: () => t.destroy(),
            });

            if (score >= 1000 && dog.texture.key !== "dogWin") {
              dog.setTexture("dogWin").setScale(0.8);
            }
          });
        };

        // boucle d’apparition
        spawn();
        this.time.addEvent({ delay: 1100, loop: true, callback: spawn });

        // Clic global = tir (pour feedback sonore léger via WebAudio natif)
        this.input.on("pointerdown", playBlip);

        // Bouton retour et touche Entrée
        document.getElementById("btnBack").addEventListener("click", goArcade);
        this.input.keyboard.on("keydown-ENTER", goArcade);
      }

      function goArcade() {
        window.location.href = "/arcade";
      }

      // bleep très simple côté DOM
      let ac;
      function playBlip() {
        try {
          ac = ac || new (window.AudioContext || window.webkitAudioContext)();
          const o = ac.createOscillator(),
            g = ac.createGain();
          o.type = "square";
          o.frequency.value = 700;
          g.gain.value = 0.06;
          o.connect(g);
          g.connect(ac.destination);
          o.start();
          setTimeout(() => o.stop(), 90);
        } catch (e) {}
      }

      new Phaser.Game(config);
    </script>
  </body>
</html>
