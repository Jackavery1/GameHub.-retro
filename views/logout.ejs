<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <title>Déconnexion – Duck Hunt</title>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link
      href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap"
      rel="stylesheet"
    />
    <style>
      :root {
        --tv: #1f2937;
        --tv-dark: #111827;
        --bezel: #374151;
        --glass: #0b1220;
        --text: #e5e7eb;
      }
      * {
        box-sizing: border-box;
      }
      html,
      body {
        height: 100%;
        margin: 0;
        background: #000;
        color: var(--text);
        font-family: "Press Start 2P", system-ui, monospace;
      }
      .stage {
        display: grid;
        place-items: center;
        height: 100%;
      }
      .tv {
        position: relative;
        width: min(920px, 95vw);
        aspect-ratio: 4/3;
        background: linear-gradient(145deg, var(--tv), var(--tv-dark));
        border: 10px solid var(--bezel);
        border-radius: 28px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.6);
      }
      .crt {
        position: absolute;
        inset: 20px;
        border-radius: 18px;
        background: var(--glass);
        overflow: hidden;
        cursor: crosshair;
      }
      .scan:before {
        content: "";
        position: absolute;
        inset: 0;
        pointer-events: none;
        background: linear-gradient(
            transparent 0 97%,
            rgba(0, 0, 0, 0.25) 97% 100%
          ),
          radial-gradient(
            120% 100% at 50% 0,
            rgba(255, 255, 255, 0.08),
            transparent 60%
          );
        background-size: 100% 3px, auto;
        mix-blend-mode: overlay;
        z-index: 3;
      }
      .hud {
        position: absolute;
        inset: 0;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        padding: 14px;
        z-index: 2;
        pointer-events: none;
      }
      .pill {
        background: rgba(0, 0, 0, 0.75);
        border: 2px solid #fff;
        border-radius: 10px;
        padding: 8px 12px;
        font-size: 12px;
      }
      .overlay {
        position: absolute;
        inset: 0;
        display: grid;
        place-items: end center;
        z-index: 2;
        pointer-events: none;
      }
      .back {
        pointer-events: auto;
        margin-bottom: 26px;
        background: #ff6b6b;
        border: 4px solid #000;
        color: #000;
        border-radius: 0;
        padding: 14px 20px;
        box-shadow: 6px 6px 0 #000;
        transition: transform 0.08s;
        font-family: "Press Start 2P", monospace;
        text-transform: uppercase;
        letter-spacing: 1px;
      }
      .back:hover {
        transform: translate(-2px, -2px);
        box-shadow: 8px 8px 0 #000;
      }
      .back:active {
        transform: none;
        box-shadow: 4px 4px 0 #000;
      }
      .backdrop {
        position: absolute;
        inset: 20px;
        border-radius: 18px;
        overflow: hidden;
      }
      .sky {
        position: absolute;
        inset: 0;
        background: linear-gradient(#8fd3ff, #c6ecff);
      }
      .ground {
        position: absolute;
        left: 0;
        right: 0;
        bottom: 0;
        height: 140px;
        background: linear-gradient(#34d399 0 70%, #065f46 70% 100%);
      }
    </style>
  </head>
  <body>
    <div class="stage">
      <div class="tv">
        <div class="backdrop">
          <div class="sky"></div>
          <div class="ground"></div>
        </div>
        <div class="crt scan">
          <div class="hud">
            <div class="pill">Vous êtes bien déconnecté !</div>
            <div class="pill">Score : <span id="uiScore">0</span></div>
          </div>
          <div id="game" style="width: 100%; height: 100%"></div>
          <div class="overlay">
            <button id="btnBack" class="back">Retour aux jeux</button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/phaser@3/dist/phaser.min.js"></script>
    <script>
      const config = {
        type: Phaser.AUTO,
        parent: "game",
        width: 800,
        height: 600,
        backgroundColor: "#9ed6ff",
        pixelArt: true,
        roundPixels: true,
        scene: { preload, create },
      };

      let score = 0,
        dog;

      function preload() {
        this.load.image("duckA", "/public/images/duckhunt4.png");
        this.load.image("duckB", "/public/images/duckhunt6.jpg");
        this.load.image("dogLaugh", "/public/images/duckhunt3.gif");
        this.load.image("dogWin", "/public/images/dh.png");
      }

      function create() {
        // "peindre" la prairie de base avec améliorations
        const g = this.add.graphics().setDepth(0);
        g.fillStyle(0x8fd3ff, 1).fillRect(0, 0, 800, 460);

        // Nuages détaillés
        g.fillStyle(0xffffff, 0.9);
        g.fillEllipse(160, 80, 80, 40);
        g.fillEllipse(200, 72, 60, 30);
        g.fillEllipse(240, 88, 70, 36);

        g.fillEllipse(560, 60, 90, 50);
        g.fillEllipse(600, 48, 70, 40);
        g.fillEllipse(640, 72, 80, 44);

        // 2 nuages supplémentaires
        g.fillEllipse(320, 100, 70, 35);
        g.fillEllipse(350, 92, 50, 25);
        g.fillEllipse(380, 108, 60, 30);

        g.fillEllipse(720, 40, 85, 45);
        g.fillEllipse(750, 32, 65, 35);
        g.fillEllipse(780, 48, 75, 38);

        // Prairie de base
        g.fillStyle(0x34d399, 1).fillRect(0, 460, 800, 100);
        g.fillStyle(0x065f46, 1).fillRect(0, 560, 800, 40);

        // Arbres en arrière-plan
        g.fillStyle(0x065f46, 1);
        g.fillEllipse(80, 520, 60, 120);
        g.fillEllipse(720, 530, 50, 100);
        g.fillEllipse(40, 560, 70, 140);
        g.fillEllipse(760, 550, 40, 80);

        // Herbes détaillées
        g.fillStyle(0x22c55e, 0.8);
        for (let i = 0; i < 20; i++) {
          const x = 40 + i * 40;
          const height = 20 + Math.random() * 20;
          g.fillEllipse(x, 500, 8, height);
        }

        // Fleurs jaunes
        g.fillStyle(0xffd400, 1);
        g.fillCircle(60, 480, 3);
        g.fillCircle(100, 485, 2);
        g.fillCircle(160, 475, 4);
        g.fillCircle(220, 490, 3);
        g.fillCircle(280, 480, 2);
        g.fillCircle(340, 485, 3);
        g.fillCircle(400, 475, 4);
        g.fillCircle(460, 490, 2);
        g.fillCircle(520, 480, 3);
        g.fillCircle(580, 485, 4);
        g.fillCircle(640, 475, 2);
        g.fillCircle(700, 490, 3);
        g.fillCircle(760, 480, 4);

        // Fleurs blanches
        g.fillStyle(0xffffff, 1);
        g.fillCircle(80, 485, 2);
        g.fillCircle(140, 480, 3);
        g.fillCircle(200, 485, 2);
        g.fillCircle(260, 475, 3);
        g.fillCircle(320, 490, 2);
        g.fillCircle(380, 480, 3);
        g.fillCircle(440, 485, 2);
        g.fillCircle(500, 475, 3);
        g.fillCircle(560, 490, 2);
        g.fillCircle(620, 480, 3);
        g.fillCircle(680, 485, 2);
        g.fillCircle(740, 475, 3);

        // Détails d'herbes supplémentaires
        g.fillStyle(0x16a34a, 0.6);
        for (let i = 0; i < 30; i++) {
          const x = 20 + i * 25;
          const height = 10 + Math.random() * 15;
          g.fillEllipse(x, 510, 3, height);
        }

        // Chien au centre, au-dessus de la prairie (taille x1.5)
        dog = this.add
          .image(400, 480, "dogLaugh")
          .setOrigin(0.5, 1)
          .setScale(0.9)
          .setDepth(2);

        // Génération régulière de canards (groupe interactif)
        const ducks = this.add.group({ runChildUpdate: true });

        const spawn = () => {
          const tex = Math.random() < 0.5 ? "duckA" : "duckB";
          const y = Phaser.Math.Between(80, 280);
          const d = this.add
            .image(-60, y, tex)
            .setScale(0.08)
            .setDepth(2)
            .setInteractive({ useHandCursor: false });
          ducks.add(d);
          this.tweens.add({
            targets: d,
            x: 860,
            duration: Phaser.Math.Between(5000, 7000),
            onComplete: () => d.destroy(),
          });
          d.on("pointerdown", () => {
            // Touché !
            score += 100;
            document.getElementById("uiScore").textContent = score;
            this.tweens.add({
              targets: d,
              alpha: 0,
              y: y + 20,
              duration: 250,
              onComplete: () => d.destroy(),
            });

            // Effet +100
            const t = this.add
              .text(d.x, d.y - 10, "+100", {
                fontFamily: "Press Start 2P",
                fontSize: "14px",
                color: "#ff4444",
              })
              .setOrigin(0.5)
              .setDepth(3);
            this.tweens.add({
              targets: t,
              y: t.y - 30,
              alpha: 0,
              duration: 600,
              onComplete: () => t.destroy(),
            });

            if (score >= 1000 && dog.texture.key !== "dogWin") {
              dog.setTexture("dogWin").setScale(0.4);
            }
          });
        };

        // boucle d’apparition
        spawn();
        this.time.addEvent({ delay: 1100, loop: true, callback: spawn });

        // Clic global = tir (pour feedback sonore léger via WebAudio natif)
        this.input.on("pointerdown", playBlip);

        // Bouton retour et touche Entrée
        document.getElementById("btnBack").addEventListener("click", goArcade);
        this.input.keyboard.on("keydown-ENTER", goArcade);
      }

      function goArcade() {
        window.location.href = "/arcade";
      }

      // bleep très simple côté DOM
      let ac;
      function playBlip() {
        try {
          ac = ac || new (window.AudioContext || window.webkitAudioContext)();
          const o = ac.createOscillator(),
            g = ac.createGain();
          o.type = "square";
          o.frequency.value = 700;
          g.gain.value = 0.06;
          o.connect(g);
          g.connect(ac.destination);
          o.start();
          setTimeout(() => o.stop(), 90);
        } catch (e) {}
      }

      new Phaser.Game(config);
    </script>

    <script>
      // Viseur qui suit la souris
      document.addEventListener("DOMContentLoaded", function () {
        const crt = document.querySelector(".crt");
        const cursor = document.createElement("div");
        cursor.style.cssText = `
          position: fixed;
          width: 20px;
          height: 20px;
          pointer-events: none;
          z-index: 1000;
          background: 
            radial-gradient(circle 2px, #ff0000 0, transparent 2px),
            radial-gradient(circle 8px, transparent 0, transparent 6px, #ff0000 6px, #ff0000 8px, transparent 8px),
            radial-gradient(circle 12px, transparent 0, transparent 10px, #ff0000 10px, #ff0000 12px, transparent 12px);
          opacity: 0.8;
          transform: translate(-50%, -50%);
        `;
        document.body.appendChild(cursor);

        // Suivre la souris
        document.addEventListener("mousemove", function (e) {
          cursor.style.left = e.clientX + "px";
          cursor.style.top = e.clientY + "px";
        });

        // Cacher le curseur par défaut sur la zone de jeu
        crt.style.cursor = "none";
      });
    </script>
  </body>
</html>
