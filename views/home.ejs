<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <title>GameHub Retro – Accueil</title>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <!-- Police rétro (facultatif) -->
    <link
      href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap"
      rel="stylesheet"
    />
    <!-- Scripts MCP -->
    <script src="/public/main.js" defer></script>
    <script src="/public/js/mcp-integration.js" defer></script>

    <style>
      :root {
        --tv: #1f2937;
        --tv-dark: #111827;
        --bezel: #374151;
        --glass: #0b1220;
        --sky: #8fd3ff;
        --grass: #34d399;
        --ground: #065f46;
        --text: #e5e7eb;
        --accent: #ffd400;
      }
      * {
        box-sizing: border-box;
      }
      html,
      body {
        height: 100%;
        margin: 0;
        background: #000;
        color: var(--text);
        font-family: "Press Start 2P", system-ui, monospace;
      }
      /* Cadre cathodique */
      .stage {
        display: grid;
        place-items: center;
        height: 100%;
      }
      .tv {
        position: relative;
        width: min(920px, 95vw);
        aspect-ratio: 4/3;
        background: linear-gradient(145deg, var(--tv), var(--tv-dark));
        border: 10px solid var(--bezel);
        border-radius: 28px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.6);
      }
      .crt {
        position: absolute;
        inset: 20px;
        border-radius: 18px;
        background: var(--glass);
        overflow: hidden;
      }
      .scan:before {
        content: "";
        position: absolute;
        inset: 0;
        pointer-events: none;
        background: linear-gradient(
            transparent 0 97%,
            rgba(0, 0, 0, 0.25) 97% 100%
          ),
          radial-gradient(
            120% 100% at 50% 0,
            rgba(255, 255, 255, 0.08),
            transparent 60%
          );
        background-size: 100% 3px, auto;
        mix-blend-mode: overlay;
        z-index: 3;
      }
      /* curseur main pixel (data-uri, correctement encodé) */
      .pixel-hand {
        cursor: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' shape-rendering='crispEdges'%3E%3Crect x='1' y='1' width='4' height='9' fill='white' stroke='black'/%3E%3Crect x='5' y='5' width='7' height='5' fill='white' stroke='black'/%3E%3Crect x='2' y='10' width='9' height='4' fill='white' stroke='black'/%3E%3C/svg%3E")
            1 1,
          pointer;
      }

      /* overlay du bouton START pour meilleures hitboxs */
      .overlay {
        position: absolute;
        inset: 0;
        display: grid;
        place-items: center;
        z-index: 2;
        pointer-events: none;
      }
      .start {
        pointer-events: auto;
        background: #ffc857;
        border: 4px solid #000;
        border-radius: 0;
        color: #000;
        font-weight: 700;
        padding: 16px 26px;
        box-shadow: 6px 6px 0 #000;
        transition: transform 0.08s;
        font-family: "Press Start 2P", monospace;
        text-transform: uppercase;
        letter-spacing: 1px;
      }
      .start:hover {
        transform: translate(-2px, -2px);
        box-shadow: 8px 8px 0 #000;
      }
      .start:active {
        transform: none;
        box-shadow: 4px 4px 0 #000;
      }
      /* “prairie” peinte sous le canvas (fallback si WebAudio bloqué etc.) */
      .backdrop {
        position: absolute;
        inset: 20px;
        border-radius: 18px;
        overflow: hidden;
      }
      .sky {
        position: absolute;
        inset: 0;
        background: linear-gradient(#8fd3ff, #c6ecff);
      }
      .ground {
        position: absolute;
        left: 0;
        right: 0;
        bottom: 0;
        height: 140px;
        background: linear-gradient(var(--grass) 0 70%, var(--ground) 70% 100%);
      }
    </style>
  </head>
  <body>
    <div class="stage">
      <div class="tv">
        <!-- décor CSS simple sous le canvas -->
        <div class="backdrop">
          <div class="sky"></div>
          <div class="ground"></div>
        </div>

        <div class="crt scan pixel-hand">
          <!-- Phaser dessine ici -->
          <div id="game" style="width: 100%; height: 100%"></div>

          <!-- bouton START au centre + accessible à Enter -->
          <div class="overlay">
            <button id="btnStart" class="start">START</button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/phaser@3/dist/phaser.min.js"></script>
    <script>
      // --- Config Phaser (canvas pixel perfect) ---
      const CRT = document.querySelector(".crt");
      const config = {
        type: Phaser.AUTO,
        parent: "game",
        width: 800,
        height: 600,
        backgroundColor: "#7fc9ff",
        pixelArt: true,
        roundPixels: true,
        physics: {
          default: "arcade",
          arcade: { gravity: { y: 0 }, debug: false },
        },
        scene: { preload, create, update },
      };

      let cursors,
        mario,
        allowJump = true;

      function preload() {
        this.load.image("mario", "/public/images/mario2.png");
      }

      function create() {
        // Ciel/prairie "peints" en Graphics pour rester simples
        const g = this.add.graphics().setDepth(0);
        g.fillStyle(0x8fd3ff, 1).fillRect(0, 0, 800, 460);

        // Nuages détaillés
        g.fillStyle(0xffffff, 0.9);
        g.fillEllipse(160, 80, 80, 40);
        g.fillEllipse(200, 72, 60, 30);
        g.fillEllipse(240, 88, 70, 36);

        g.fillEllipse(560, 60, 90, 50);
        g.fillEllipse(600, 48, 70, 40);
        g.fillEllipse(640, 72, 80, 44);

        // 2 nuages supplémentaires
        g.fillEllipse(320, 100, 70, 35);
        g.fillEllipse(350, 92, 50, 25);
        g.fillEllipse(380, 108, 60, 30);

        g.fillEllipse(720, 40, 85, 45);
        g.fillEllipse(750, 32, 65, 35);
        g.fillEllipse(780, 48, 75, 38);

        // Prairie de base
        g.fillStyle(0x34d399, 1).fillRect(0, 460, 800, 100);
        g.fillStyle(0x065f46, 1).fillRect(0, 560, 800, 40);

        // Arbres en arrière-plan
        g.fillStyle(0x065f46, 1);
        g.fillEllipse(80, 520, 60, 120);
        g.fillEllipse(720, 530, 50, 100);
        g.fillEllipse(40, 560, 70, 140);
        g.fillEllipse(760, 550, 40, 80);

        // Herbes détaillées
        g.fillStyle(0x22c55e, 0.8);
        for (let i = 0; i < 20; i++) {
          const x = 40 + i * 40;
          const height = 20 + Math.random() * 20;
          g.fillEllipse(x, 500, 8, height);
        }

        // Fleurs jaunes
        g.fillStyle(0xffd400, 1);
        g.fillCircle(60, 480, 3);
        g.fillCircle(100, 485, 2);
        g.fillCircle(160, 475, 4);
        g.fillCircle(220, 490, 3);
        g.fillCircle(280, 480, 2);
        g.fillCircle(340, 485, 3);
        g.fillCircle(400, 475, 4);
        g.fillCircle(460, 490, 2);
        g.fillCircle(520, 480, 3);
        g.fillCircle(580, 485, 4);
        g.fillCircle(640, 475, 2);
        g.fillCircle(700, 490, 3);
        g.fillCircle(760, 480, 4);

        // Fleurs blanches
        g.fillStyle(0xffffff, 1);
        g.fillCircle(80, 485, 2);
        g.fillCircle(140, 480, 3);
        g.fillCircle(200, 485, 2);
        g.fillCircle(260, 475, 3);
        g.fillCircle(320, 490, 2);
        g.fillCircle(380, 480, 3);
        g.fillCircle(440, 485, 2);
        g.fillCircle(500, 475, 3);
        g.fillCircle(560, 490, 2);
        g.fillCircle(620, 480, 3);
        g.fillCircle(680, 485, 2);
        g.fillCircle(740, 475, 3);

        // Détails d'herbes supplémentaires
        g.fillStyle(0x16a34a, 0.6);
        for (let i = 0; i < 30; i++) {
          const x = 20 + i * 25;
          const height = 10 + Math.random() * 15;
          g.fillEllipse(x, 510, 3, height);
        }

        // Nuages détaillés
        g.fillStyle(0xffffff, 0.9);
        g.fillEllipse(160, 80, 80, 40);
        g.fillEllipse(200, 72, 60, 30);
        g.fillEllipse(240, 88, 70, 36);

        g.fillEllipse(560, 60, 90, 50);
        g.fillEllipse(600, 48, 70, 40);
        g.fillEllipse(640, 72, 80, 44);

        // Prairie de base
        g.fillStyle(0x34d399, 1).fillRect(0, 460, 800, 100);
        g.fillStyle(0x065f46, 1).fillRect(0, 560, 800, 40);

        // Arbres en arrière-plan
        g.fillStyle(0x065f46, 1);
        g.fillEllipse(80, 520, 60, 120);
        g.fillEllipse(720, 530, 50, 100);
        g.fillEllipse(40, 560, 70, 140);
        g.fillEllipse(760, 550, 40, 80);

        // Herbes détaillées
        g.fillStyle(0x22c55e, 0.8);
        for (let i = 0; i < 20; i++) {
          const x = 40 + i * 40;
          const height = 20 + Math.random() * 20;
          g.fillEllipse(x, 500, 8, height);
        }

        // Fleurs jaunes
        g.fillStyle(0xffd400, 1);
        g.fillCircle(60, 480, 3);
        g.fillCircle(100, 485, 2);
        g.fillCircle(160, 475, 4);
        g.fillCircle(220, 490, 3);
        g.fillCircle(280, 480, 2);
        g.fillCircle(340, 485, 3);
        g.fillCircle(400, 475, 4);
        g.fillCircle(460, 490, 2);
        g.fillCircle(520, 480, 3);
        g.fillCircle(580, 485, 4);
        g.fillCircle(640, 475, 2);
        g.fillCircle(700, 490, 3);
        g.fillCircle(760, 480, 4);

        // Fleurs blanches
        g.fillStyle(0xffffff, 1);
        g.fillCircle(80, 485, 2);
        g.fillCircle(140, 480, 3);
        g.fillCircle(200, 485, 2);
        g.fillCircle(260, 475, 3);
        g.fillCircle(320, 490, 2);
        g.fillCircle(380, 480, 3);
        g.fillCircle(440, 485, 2);
        g.fillCircle(500, 475, 3);
        g.fillCircle(560, 490, 2);
        g.fillCircle(620, 480, 3);
        g.fillCircle(680, 485, 2);
        g.fillCircle(740, 475, 3);

        // Détails d'herbes supplémentaires
        g.fillStyle(0x16a34a, 0.6);
        for (let i = 0; i < 30; i++) {
          const x = 20 + i * 25;
          const height = 10 + Math.random() * 15;
          g.fillEllipse(x, 510, 3, height);
        }

        // Plateformes stylisées Mario Bros NES
        const platformData = [
          { x: 160, y: 420, width: 180, height: 16 },
          { x: 420, y: 360, width: 150, height: 16 },
          { x: 660, y: 300, width: 120, height: 16 },
        ];

        platformData.forEach((data, index) => {
          const platform = this.add.graphics().setDepth(1);

          // Base de la plateforme (brique principale)
          platform.fillStyle(0xd4a574, 1);
          platform.fillRect(data.x, data.y, data.width, data.height);

          // Contour sombre
          platform.lineStyle(2, 0x8b4513, 1);
          platform.strokeRect(data.x, data.y, data.width, data.height);

          // Détails de briques (lignes horizontales)
          platform.lineStyle(1, 0x8b4513, 0.8);
          for (let i = 1; i < 3; i++) {
            platform.beginPath();
            platform.moveTo(data.x, data.y + (data.height / 3) * i);
            platform.lineTo(
              data.x + data.width,
              data.y + (data.height / 3) * i
            );
            platform.strokePath();
          }

          // Détails de briques (lignes verticales)
          for (let i = 1; i < 6; i++) {
            platform.beginPath();
            platform.moveTo(data.x + (data.width / 6) * i, data.y);
            platform.lineTo(
              data.x + (data.width / 6) * i,
              data.y + data.height
            );
            platform.strokePath();
          }

          // Effet 3D (ombre)
          platform.fillStyle(0xf4d03f, 0.3);
          platform.fillRect(data.x + 2, data.y + 2, data.width - 4, 4);

          // Effet 3D (surbrillance)
          platform.fillStyle(0xc0392b, 0.2);
          platform.fillRect(
            data.x + 2,
            data.y + data.height - 4,
            data.width - 4,
            4
          );
        });

        // Mario (pas de gravité : on simule le “saut” par tween)
        mario = this.add
          .image(100, 430, "mario")
          .setOrigin(0.5, 1)
          .setScale(0.032);
        mario.setData("vy", 0);

        // Zone invisible “START” pour déclenchement par collision

        // Touches
        cursors = this.input.keyboard.createCursorKeys();
        this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);
        this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);
        this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);
        this.input.keyboard.on("keydown-ENTER", goArcade);

        // Empêcher le scroll avec les flèches/espace
        window.addEventListener("keydown", (e) => {
          if (["ArrowLeft", "ArrowRight", "ArrowUp", " "].includes(e.key))
            e.preventDefault();
        });

        // Clique sur START (overlay HTML)
        document.getElementById("btnStart").addEventListener("click", goArcade);
      }

      function update(time, dt) {
        // Déplacements simples gauche/droite
        if (
          cursors.left.isDown ||
          this.input.keyboard.checkDown(this.input.keyboard.keys[65])
        ) {
          mario.x = Math.max(20, mario.x - 2.2);
          mario.setFlipX(true);
        } else if (
          cursors.right.isDown ||
          this.input.keyboard.checkDown(this.input.keyboard.keys[68])
        ) {
          mario.x = Math.min(780, mario.x + 2.2);
          mario.setFlipX(false);
        }

        // Saut (petit tween vers le haut)
        const jumpKey =
          cursors.up.isDown ||
          this.input.keyboard.checkDown(this.input.keyboard.keys[87]) ||
          this.input.keyboard.checkDown(cursors.space);
        if (jumpKey && allowJump) {
          allowJump = false;
          this.tweens.add({
            targets: mario,
            y: 380,
            duration: 160,
            yoyo: true,
            ease: "Quad.easeOut",
            onComplete: () => (allowJump = true),
          });
        }
      }

      function goArcade() {
        window.location.href = "/arcade";
      }

      new Phaser.Game(config);
    </script>
  </body>
</html>
